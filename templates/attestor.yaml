---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.15.0
  name: attestors.container-security.trendmicro.com
spec:
  group: container-security.trendmicro.com
  names:
    kind: Attestor
    listKind: AttestorList
    plural: attestors
    singular: attestor
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Attestor is the Schema for the attestors API.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            type: object
            description: AttestorSpec defines the desired state of Attestor.
            properties:
              publicKey:
                description: Public key for signature verification
                pattern: ^-----BEGIN PUBLIC KEY-----[\s\S]+?-----END PUBLIC KEY-----$
                type: string
                x-kubernetes-validations:
                - message: publicKey must not be empty
                  rule: self != ''
              transparencyLogEnabled:
                description: Whether to verify the signature using a transparency
                  log server
                type: boolean
                x-kubernetes-validations:
                - message: transparencyLogEnabled must be a boolean
                  rule: self == true || self == false
              transparencyLogOptions:
                description: The options for the transparency log server. If not provided,
                  the default is to use the Rekor server
                properties:
                  publicKey:
                    description: The public key of the transparency log server.
                    pattern: ^-----BEGIN PUBLIC KEY-----[\s\S]+?-----END PUBLIC KEY-----$
                    type: string
                  server:
                    description: The URL of the transparency log server.
                    pattern: ^https?://[a-zA-Z0-9.-]+(:[0-9]+)?(/.*)?$
                    type: string
                type: object
              type:
                description: Type of the attestor. Right now we only support "cosignPublicKey"
                  attestor.
                enum:
                - cosignPublicKey
                type: string
            x-kubernetes-validations:
            - message: publicKey is required for cosignPublicKey attestor
              rule: self.type == 'cosignPublicKey' && has(self.publicKey) && self.publicKey != ''
          status:
            description: AttestorStatus defines the observed state of Attestor.
            properties:
              conditions:
                description: |-
                  Represents the observations of Attestor current state.
                  "Parsed" to indicate if the attestor is able to be parsed successfully
                  "Applied" to indicate if the attestor is applied in VisionOne backend
                  "InUse" to indicate if the attestor is assigned to a policy
                  "Drifted" to indicate if the attestor is drifted from the VisionOne backend
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              visiononeattestorid:
                description: VisionOne Attestor ID
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
