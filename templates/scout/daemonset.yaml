{{- if eq true .Values.cloudOne.runtimeSecurity.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: trendmicro-scout
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "scout.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
    {{- include "scout.selectorLabels" .| nindent 6 }}
  template:
    metadata:
      name: trendmicro-scout
      labels:
      {{- include "scout.labels" .| nindent 8 }}
      annotations:
{{- $hasApparmorProfile := semverCompare ">=1.30" (include "kubeVersion" .) -}}
{{- if not $hasApparmorProfile }}
        container.apparmor.security.beta.kubernetes.io/falco: unconfined
        container.apparmor.security.beta.kubernetes.io/scout: unconfined
{{- end }}{{/* if */}}
        checksum/config: {{ include (print $.Template.BasePath "/scout/configmap.yaml") . | sha256sum }}
{{- if eq "tls" .Values.cloudOne.k8sMetaCollector.grpcAuth.type }}
        checksum/metacollector: {{ include (print $.Template.BasePath "/k8s-metacollector-secret.yaml") . | sha256sum }}
{{- end }}
{{- with (default .Values.podAnnotations.defaults .Values.podAnnotations.scout) }}
{{- toYaml . | nindent 8 }}
{{- end }}{{/* with */}}
        customrules/enabled: {{ and .Values.cloudOne.runtimeSecurity.enabled .Values.cloudOne.runtimeSecurity.customRules.enabled | quote }}

    spec:
      serviceAccountName: {{ include "scout.serviceAccountName" . }}
      hostNetwork: true
      shareProcessNamespace: true
      dnsPolicy: ClusterFirstWithHostNet
{{- $classname := (default (default "" .Values.priorityClassName.default ) .Values.priorityClassName.scout) }}
{{- if not (eq "" $classname) }}
      priorityClassName: "{{ $classname }}"
{{- end }}{{/* if */}}
      nodeSelector:
{{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.scout) | indent 8 }}
      affinity:
{{ toYaml (default .Values.affinity.defaults .Values.affinity.scout) | indent 8 }}
      tolerations:
{{ toYaml (default .Values.tolerations.defaults .Values.tolerations.scout) | indent 8 }}
      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.falco }}
      {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
      {{- if not (eq "" $secret) }}
      imagePullSecrets:
        - name: {{ $secret | quote }}
      {{- end }}{{/* if */}}
      {{- end }}{{/* with */}}
{{- $securityContextEnabled := .Values.securityContext.enabled }}
{{- $securityContext := default .Values.securityContext.default .Values.securityContext.scout }}
{{- $podSecurityContext := default .Values.securityContext.default.pod $securityContext.pod }}
{{- $scoutSecurityContext := default .Values.securityContext.default.container $securityContext.scout }}
{{- $falcoSecurityContext := default .Values.securityContext.default.container $securityContext.falco }}
{{- $downloaderSecurityContext := default .Values.securityContext.default.container $securityContext.downloader }}
{{- $initSecurityContext := default .Values.securityContext.default.container $securityContext.init }}
{{- if $securityContextEnabled }}
      securityContext:
{{ toYaml $podSecurityContext | indent 8 }}
{{- end }}{{/* if $securityContextEnabled */}}
      containers:
        - name: falco
          {{- with .Values.images.falco }}
          {{- $project := (default (default "trendmicrocloudone" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}{{/* with */}}
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.falco) | indent 12 }}
{{- if $securityContextEnabled }}
          securityContext:
{{ toYaml $falcoSecurityContext | indent 12 }}
{{- if $hasApparmorProfile }}
            appArmorProfile:
              type: Unconfined
{{- end }}{{/* if */}}
{{- end }}{{/* if $securityContextEnabled */}}
          args:
            - /usr/bin/falco
            {{- if .Values.scout.falco.cri.enabled }}
            - --cri
            - /run/cri/cri.sock
            {{- end }}{{/* if */}}
            {{- if .Values.scout.falco.dockershim.enabled }}
            - --cri
            - /run/dockershim.sock
            {{- end }}{{/* if */}}
            {{- if .Values.scout.falco.k0s.enabled }}
            - --cri
            - /run/k0s/containerd.sock
            {{- end }}{{/* if */}}
            {{- if .Values.scout.falco.k3s.enabled }}
            - --cri
            - /run/k3s/containerd/containerd.sock
            {{- end }}{{/* if */}}
            - -p
            - >
              container.id=%container.id
              container.image.digest=%container.image.digest
              container.image.repository=%container.image.repository
              container.image.tag=%container.image.tag
              container.name=%container.name
              evt.arg.filename=%evt.arg.filename
              evt.arg.mode=%evt.arg.mode
              evt.arg.name=%evt.arg.name
              evt.category=%evt.category
              evt.num=%evt.num
              evt.rawtime=%evt.rawtime
              evt.type=%evt.type
              k8s.ns.name=%k8s.ns.name
              k8s.pod.id=%k8s.pod.id
              k8s.pod.labels=%k8s.pod.labels
              k8s.pod.name=%k8s.pod.name
              proc.args=%proc.args
              proc.cmdline=%proc.cmdline
              proc.exe=%proc.exe
              proc.exeline=%proc.exeline
              proc.name=%proc.name
              proc.pcmdline=%proc.pcmdline
              proc.pid=%proc.pid
              proc.pname=%proc.pname
              proc.ppid=%proc.ppid
              user.loginuid=%user.loginuid
              user.name=%user.name
        {{- if .Values.scout.falco.extraArgs }}
{{ toYaml .Values.scout.falco.extraArgs | indent 12 }}
        {{- end }}{{/* if */}}
          env:
            - name: SKIP_DRIVER_LOADER
              value: "true"
            - name: TZ
              value:
          {{- range $key, $value := .Values.scout.falco.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
          {{- end }}{{/* range */}}
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            {{- if .Values.scout.falco.docker.enabled }}
            - mountPath: /host/var/run/docker.sock
              name: docker-socket
            {{- end}}{{/* if */}}
            {{- if .Values.scout.falco.cri.enabled }}
            - mountPath: /host/run/cri/cri.sock
              name: cri-socket
            {{- end}}{{/* if */}}
            {{- if .Values.scout.falco.dockershim.enabled }}
            - mountPath: /host/run/dockershim.sock
              name: dockershim-socket
            {{- end}}{{/* if */}}
            {{- if .Values.scout.falco.k0s.enabled }}
            - mountPath: /host/run/k0s/containerd.sock
              name: k0s-socket
            {{- end}}{{/* if */}}
            {{- if .Values.scout.falco.k3s.enabled }}
            - mountPath: /host/run/k3s/containerd/containerd.sock
              name: k3s-socket
            {{- end}}{{/* if */}}
            - mountPath: /host/dev
              name: dev-fs
              readOnly: true
            - mountPath: /host/proc
              name: proc-fs
              readOnly: true
            - mountPath: /host/boot
              name: boot-fs
              readOnly: true
            - mountPath: /host/lib/modules
              name: lib-modules
            - mountPath: /host/usr
              name: usr-fs
              readOnly: true
            - mountPath: /host/etc
              name: etc-fs
              readOnly: true
            - mountPath: /sys/kernel/debug
              name: debugfs
              readOnly: true
            - mountPath: /etc/falco
              name: config-volume
              readOnly: true
            - mountPath: /etc/scout/rules.d
              name: rules-volume
              readOnly: true
            - mountPath: /var/run/scout
              name: grpc-socket-dir
            - mountPath: /root/.falco
              name: components-dir
              readOnly: true
{{- if .Values.cloudOne.runtimeSecurity.customRules.enabled }}
        - name: falco-customrules
          {{- with .Values.images.falco }}
          {{- $project := (default (default "trendmicrocloudone" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}{{/* with */}}
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.falco) | indent 12 }}
{{- if $securityContextEnabled }}
          securityContext:
{{ toYaml $falcoSecurityContext | indent 12 }}
{{- if $hasApparmorProfile }}
            appArmorProfile:
              type: Unconfined
{{- end }}{{/* if */}}
{{- end }}{{/* if $securityContextEnabled */}}
          args:
            - /usr/bin/falco
            - -c
            - /etc/falco/falco-customrules.yaml
            {{- if .Values.scout.falco.cri.enabled }}
            - --cri
            - /run/cri/cri.sock
            {{- end }}{{/* if */}}
            {{- if .Values.scout.falco.dockershim.enabled }}
            - --cri
            - /run/dockershim.sock
            {{- end }}{{/* if */}}
            - -K
            - /var/run/secrets/kubernetes.io/serviceaccount/token
            - -k
            - {{ default "https://$(KUBERNETES_SERVICE_HOST)" .Values.scout.falco.apiUrl }}
            - --k8s-node
            - $(NODE_NAME)
            - -p
            - >
              container.id=%container.id
              container.image.digest=%container.image.digest
              container.image.repository=%container.image.repository
              container.image.tag=%container.image.tag
              container.name=%container.name
              evt.arg.filename=%evt.arg.filename
              evt.arg.mode=%evt.arg.mode
              evt.arg.name=%evt.arg.name
              evt.category=%evt.category
              evt.num=%evt.num
              evt.rawtime=%evt.rawtime
              evt.type=%evt.type
              k8s.ns.name=%k8s.ns.name
              k8s.pod.id=%k8s.pod.id
              k8s.pod.labels=%k8s.pod.labels
              k8s.pod.name=%k8s.pod.name
              proc.args=%proc.args
              proc.cmdline=%proc.cmdline
              proc.exe=%proc.exe
              proc.exeline=%proc.exeline
              proc.name=%proc.name
              proc.pcmdline=%proc.pcmdline
              proc.pid=%proc.pid
              proc.pname=%proc.pname
              proc.ppid=%proc.ppid
              user.loginuid=%user.loginuid
              user.name=%user.name
        {{- if .Values.scout.falco.extraArgs }}
{{ toYaml .Values.scout.falco.extraArgs | indent 12 }}
        {{- end }}{{/* if */}}
          env:            
            - name: SKIP_DRIVER_LOADER
              value: "true"
            - name: TZ
              value:
          {{- range $key, $value := .Values.scout.falco.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
          {{- end }}{{/* range */}}
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            {{- if .Values.scout.falco.docker.enabled }}
            - mountPath: /host/var/run/docker.sock
              name: docker-socket
            {{- end}}{{/* if */}}
            {{- if .Values.scout.falco.cri.enabled }}
            - mountPath: /host/run/cri/cri.sock
              name: cri-socket
            {{- end}}{{/* if */}}
            {{- if .Values.scout.falco.dockershim.enabled }}
            - mountPath: /host/run/dockershim.sock
              name: dockershim-socket
            {{- end}}{{/* if */}}
            - mountPath: /host/dev
              name: dev-fs
              readOnly: true
            - mountPath: /host/proc
              name: proc-fs
              readOnly: true
            - mountPath: /host/boot
              name: boot-fs
              readOnly: true
            - mountPath: /host/lib/modules
              name: lib-modules
            - mountPath: /host/usr
              name: usr-fs
              readOnly: true
            - mountPath: /host/etc
              name: etc-fs
              readOnly: true
            - mountPath: /sys/kernel/debug
              name: debugfs
              readOnly: true
            - mountPath: /etc/falco
              name: config-volume
              readOnly: true
            - mountPath: /etc/falco/rules.d
              name: customrules-volume
              readOnly: true
            - mountPath: /root/.falco
              name: components-dir
              readOnly: true
{{- end }}{{/* if */}}
        - name: scout
          {{- $imageDefaults := .Values.images.defaults }}
          {{- with .Values.images.scout }}
          {{- $project := (default (default "trendmicrocloudone" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}{{/* with */}}
          args:
            - --grpc-socket-path
            - unix:///var/run/scout/scout.sock
            - --cloud-one-endpoint={{ include "container.security.endpoint" . }}
            - --exclude-kubernetes-service-host-from-proxy={{ default "false" .Values.proxy.excludeKubernetesServiceHost }}
            - --excluded-namespaces
            {{- $excludeNS := (default (list) .Values.cloudOne.exclusion.namespaces) }}
            {{- if .Values.scout.excludeSameNamespace }}
                {{- $excludeNS = append $excludeNS .Release.Namespace }}
            {{- end}}{{/* if */}}
            - {{ $excludeNS | join "," | quote }}
            - --falco-event-max-diff
            - 90s
            {{- if ne (len .Values.scout.scout.falcoInternalEvent) 0 }}
            - --falco-internal-event
            - {{ join "," .Values.scout.scout.falcoInternalEvent }}
            {{- end}}{{/* if */}}
            - --k8s-metacollector
            - {{ include "k8sMetaCollector.svc.url" . }}
            {{- if eq "tls" .Values.cloudOne.k8sMetaCollector.grpcAuth.type }}
            - --k8s-metacollector-cert
            - /etc/scout/metacollector-ca-cert.pem
            {{- end}}
        {{- if .Values.scout.scout.extraArgs }}
{{ toYaml .Values.scout.scout.extraArgs | indent 12 }}
        {{- end }}{{/* if */}}
          env:
          {{- include "container.security.proxy.env" . | nindent 12 }}
          {{- range $key, $value := .Values.scout.scout.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
          {{- end }}{{/* range */}}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
{{- if $securityContextEnabled }}
          securityContext:
{{ toYaml $scoutSecurityContext | indent 12 }}
{{- if $hasApparmorProfile }}
            appArmorProfile:
              type: Unconfined
{{- end }}{{/* if */}}
{{- end }}{{/* if */}}
          volumeMounts:
            - mountPath: /var/run/scout/
              name: grpc-socket-dir
              readOnly: true
            - mountPath: /etc/scout/rules.d
              name: rules-volume
            - mountPath: /var/scout
              name: scout-workdir
            - mountPath: /secrets
              name: api-key
              readOnly: true
{{- if eq "tls" .Values.cloudOne.k8sMetaCollector.grpcAuth.type }}
            - mountPath: /etc/scout/metacollector-ca-cert.pem
              name: metacollector-grpc-certs
              subPath: ca-cert.pem
              readOnly: true
{{- end }}
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.scout) | indent 12 }}
      initContainers:
        {{ if eq .Values.scout.downloader.componentType "falco-ebpf-program" }}
        - name: falcoversion
          {{- $imageDefaults := .Values.images.defaults }}
          {{- with .Values.images.falco }}
          {{- $project := (default (default "trendmicrocloudone" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}{{/* with */}}
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.falcoversion) | indent 12 }}
{{- if $securityContextEnabled }}
          securityContext:
{{ toYaml $initSecurityContext | indent 12 }}
{{- end }}{{/* if */}}
          volumeMounts:
            - mountPath: {{ .Values.scout.downloader.componentDir }}
              name: components-dir
          command:
            - cp
          args:
            - /component.version
            - {{ .Values.scout.downloader.componentDir }}
        {{- end }}{{/* if eq */}}
        - name: downloader
          {{- $imageDefaults := .Values.images.defaults }}
          {{- with .Values.images.scout }}
          {{- $project := (default (default "trendmicrocloudone" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}{{/* with */}}
          command:
            - /downloader
          args:
            - --cloud-one-endpoint={{ include "container.security.endpoint" . }}
            - --exclude-kubernetes-service-host-from-proxy={{ default "false" .Values.proxy.excludeKubernetesServiceHost }}
            - --log-level
            - debug
            - --componentdir
            - {{ .Values.scout.downloader.componentDir }}
{{- if .Values.scout.falco.modernBpf }}
            - --btfpath
            - /sys/kernel/btf/vmlinux
{{- end }}{{/* if */}}
        {{- if .Values.scout.downloader.extraArgs }}
{{ toYaml .Values.scout.downloader.extraArgs | indent 12 }}
        {{- end }}{{/* if */}}
          env:
          {{- include "container.security.proxy.env" . | nindent 12 }}
          {{- range $key, $value := .Values.scout.downloader.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
          {{- end }}{{/* range */}}
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: HOST_ROOT
              value: "/host"
            - name: SCOUT_COMPONENT_TYPE
              value: {{ .Values.scout.downloader.componentType }}
            - name: SCOUT_COMPONENT_VERSION
              value: "{{ .Values.scout.downloader.componentDir }}/component.version"
          volumeMounts:
            - mountPath: /var/scout
              name: scout-workdir
            - mountPath: {{ .Values.scout.downloader.componentDir }}
              name: components-dir
            - mountPath: /host/etc
              name: etc-fs
              readOnly: true
            - mountPath: /host/usr
              name: usr-fs
              readOnly: true
            - mountPath: /secrets
              name: api-key
              readOnly: true
{{- if $securityContextEnabled }}
          securityContext:
{{ toYaml $downloaderSecurityContext | indent 12 }}
{{- end }}{{/* if */}}
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.downloader) | indent 12 }}
      volumes:
        - name: api-key
          secret:
            secretName: {{ template "container.security.fullname" . }}-auth
        {{- if .Values.scout.falco.docker.enabled }}
        - name: docker-socket
          hostPath:
            path: {{ .Values.scout.falco.docker.socket }}
        {{- end}}{{/* if */}}
        {{- if .Values.scout.falco.cri.enabled }}
        - name: cri-socket
          hostPath:
            # default is /run/crio/crio.sock on OpenShift.
            {{- $defaultcripath := "/run/containerd/containerd.sock" }}
            {{- if .Capabilities.APIVersions.Has "security.openshift.io/v1" }}
            {{- $defaultcripath = "/run/crio/crio.sock" }}
            {{- end }}{{/* if */}}
            path: {{ .Values.scout.falco.cri.socket | default $defaultcripath }}
        {{- end }}{{/* if */}}
        {{- if .Values.scout.falco.dockershim.enabled }}
        - name: dockershim-socket
          hostPath:
            # default is /run/dockershim.sock on bottlerocket.
            {{- $defaultdockershimpath := "/run/dockershim.sock" }}
            path: {{ .Values.scout.falco.dockershim.socket | default $defaultdockershimpath }}
        {{- end }}{{/* if */}}
        {{- if .Values.scout.falco.k0s.enabled }}
        - name: k0s-socket
          hostPath:
            {{- $defaultk0spath := "/run/k0s/containerd.sock" }}
            path: {{ .Values.scout.falco.k0s.socket | default $defaultk0spath }}
        {{- end }}{{/* if */}}
        {{- if .Values.scout.falco.k3s.enabled }}
        - name: k3s-socket
          hostPath:
            {{- $defaultk3spath := "/run/k3s/containerd/containerd.sock" }}
            path: {{ .Values.scout.falco.k3s.socket | default $defaultk3spath }}
        {{- end }}{{/* if */}}
        - name: dev-fs
          hostPath:
            path: /dev
        - name: proc-fs
          hostPath:
            path: /proc
        - name: boot-fs
          hostPath:
            path: /boot
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: usr-fs
          hostPath:
            path: /usr
        - name: etc-fs
          hostPath:
            path: /etc
        - name: debugfs
          hostPath:
            path: /sys/kernel/debug
        - name: config-volume
          configMap:
            name: {{ template "container.security.name" . }}-scout-config
            items:
              - key: falco.yaml
                path: falco.yaml
{{- if .Values.cloudOne.runtimeSecurity.customRules.enabled }}
              - key: falco-customrules.yaml
                path: falco-customrules.yaml
{{- end }}
              - key: default_rules.yaml
                path: default_rules.yaml
        - name: grpc-socket-dir
          emptyDir:
            sizeLimit: 10Mi
        - name: rules-volume
          emptyDir:
            sizeLimit: 50Mi
{{- if .Values.cloudOne.runtimeSecurity.customRules.enabled }}
        - name: customrules-volume
          configMap:
            name: {{ template "container.security.name" . }}-customrules
{{- end }}
        - name: scout-workdir
          emptyDir:
            sizeLimit: 50Mi
        - name: components-dir
          emptyDir:
            sizeLimit: 50Mi
{{- if eq "tls" .Values.cloudOne.k8sMetaCollector.grpcAuth.type }}
        - name: metacollector-grpc-certs
          secret:
            secretName: {{ template "k8sMetaCollector.fullname" . }}-tls-certificate
{{- end }}
  updateStrategy:
    type: RollingUpdate
{{- end }}{{/* if eq true .Values.cloudOne.runtimeSecurity.enabled */}}
