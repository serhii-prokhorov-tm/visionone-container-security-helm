{{- if and .Values.visionOne.runtimeSecurity.enabled .Values.visionOne.runtimeSecurity.customRules.enabled }}
{{ $events_pipe := (printf "%v/falco-customrules-events" .Values.scout.falco.falcoctl.pipes_dir ) }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "container.security.name" . }}-customrules-falco-config
  labels:
    {{- include "scout.labels" . | nindent 4 }}
data:
  {{- if .Values.visionOne.runtimeSecurity.customRules.ociRepository.enabled }}
  falcoctl.yaml: |
    artifact:
      follow:
        every: 6h0m0s
        refs:
        {{- range .Values.visionOne.runtimeSecurity.customRules.ociRepository.artifactUrls }}
          - {{ . }}
        {{- end }}
  {{- end }}
  falco-customrules-wrapper.sh: |
    #!/usr/bin/env bash
    #set -x
  {{- if .Values.visionOne.runtimeSecurity.customRules.ociRepository.enabled }}
    # create empty oci-artifact files to allow falco watch them;
    # falco skips non-existed files
    {{- range .Values.visionOne.runtimeSecurity.customRules.ociRepository.ruleFiles }}
    > {{ $.Values.scout.falco.ociRepository.artifacts_dir }}/{{- . -}}
    {{- end }}
    # configure OCI artifact with falcoctl
    set -o pipefail
    # this pipe aggregates falco and falcoctl events
    mkfifo {{ $events_pipe }}
    {{- if .Values.visionOne.runtimeSecurity.customRules.params.clusterName }}
    SIEM_CLUSTER_NAME={{- .Values.visionOne.runtimeSecurity.customRules.params.clusterName | quote -}}
    {{- else if .Values.clusterName }}
    SIEM_CLUSTER_NAME={{- .Values.clusterName | quote -}}
    {{- else }}
    SIEM_CLUSTER_NAME=""
    {{- end }}
    export SIEM_CLUSTER_NAME
    # map events generated by falco and falcoctl into artifact related events and send them using HEC_CLIENT
    tail -f {{ $events_pipe }} | /usr/scripts/falco-customrules-events-sender.sh &
    # run falcoctl as subprocess, redirect its output to falcoctl-artifact-installed-processor.sh;
    # certain falcoctl parameters are hardcoded and not exposes through helm chart.
    # Instead they are injected as arguments;
    {{- if .Values.visionOne.runtimeSecurity.customRules.ociRepository.basicAuthTokenSecretName }}
    FALCOCTL_REGISTRY_AUTH_BASIC=${FALCOCTL_REGISTRY_AUTH_BASIC} \
    {{- end }}
    /usr/bin/falcoctl --config /etc/falcoctl-config-volume/falcoctl.yaml \
    artifact \
    follow \
    --falco-versions "http://127.0.0.1:{{- .Values.scout.falco.falcoctl.web_server_port -}}/versions" \
    --rulesfiles-dir {{ $.Values.scout.falco.ociRepository.artifacts_dir | quote }} \
    --log-format json \
    --log-level trace \
    2>&1 | tee >(/usr/scripts/falcoctl-artifact-installed-processor.sh {{ $events_pipe }}) &
  {{- end }}
    /usr/bin/falco \
    -c /etc/falco/falco-customrules.yaml \
    {{- range regexSplit "\n" (include "containerRuntime.sock.falco.args" .Values.scout.falco ) -1 }}
    {{- $v := (. | nospace | trimPrefix "-") -}}
    {{- if $v }}
    {{ $v }} \
    {{- end }}
    {{- end }}
    -v \
    -p \
    container.id=%container.id \
    container.image.digest=%container.image.digest \
    container.image.repository=%container.image.repository \
    container.image.tag=%container.image.tag \
    container.name=%container.name \
    evt.arg.filename=%evt.arg.filename \
    evt.arg.mode=%evt.arg.mode \
    evt.arg.name=%evt.arg.name \
    evt.category=%evt.category \
    evt.num=%evt.num \
    evt.rawtime=%evt.rawtime \
    evt.type=%evt.type \
    k8s.ns.name=%k8s.ns.name \
    k8s.pod.id=%k8s.pod.id \
    k8s.pod.labels=%k8s.pod.labels \
    k8s.pod.name=%k8s.pod.name \
    proc.args=%proc.args \
    proc.cmdline=%proc.cmdline \
    proc.exe=%proc.exe \
    proc.exeline=%proc.exeline \
    proc.name=%proc.name \
    proc.pcmdline=%proc.pcmdline \
    proc.pid=%proc.pid \
    proc.pname=%proc.pname \
    proc.ppid=%proc.ppid \
    user.loginuid=%user.loginuid \
    user.name=%user.name \
    -o \
    stdout_output.enabled={{ default "false" .Values.scout.falco.stdout_enabled }} \
    -o \
    syslog_output.enabled={{ default "false" .Values.scout.falco.syslog_enabled }} \
    {{- if .Values.scout.falco.extraArgs }}{{ join " \\" .Values.scout.falco.extraArgs }}{{- end }}{{/* if */}}
  {{- if .Values.visionOne.runtimeSecurity.customRules.ociRepository.enabled }}
    2>&1 \
    | tee >(/usr/scripts/falco-customrules-falcoctl-rules-applied-processor.sh {{ $events_pipe }})
  {{- end }}
    #kill $sender_pid
{{- end }}
