{{- if and (eq true .Values.visionOne.runtimeSecurity.enabled) (eq true .Values.visionOne.fargateInjector.enabled) (not .Values.spc.enabled) }}
apiVersion: v1
kind: Service
metadata:
  name: trendmicro-fargate-injector
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "fargateInjector.labels" . | nindent 4 }}
spec:
  ports:
    - port: 443
      targetPort: 8443
      protocol: TCP
  selector:
    {{- include "fargateInjector.selectorLabels" . | nindent 4 }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trendmicro-fargate-injector
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "fargateInjector.labels" . | nindent 4 }}
spec:
  # We set revisionHistoryLimit to 0 because rollback should be done
  # using `helm rollback` rather than with `kubectl rollout undo`, so
  # we don't need to keep the old `ReplicaSet`s around.
  # https://kubernetes.io/docs/concepts/workloads/controllers/deployment
  revisionHistoryLimit: 0
  replicas: {{ default 1 .Values.replicas.fargateInjector }}
  selector:
    matchLabels:
      {{- include "fargateInjector.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/auth: {{ include "container.security.auth.secret" . | sha256sum }}
        # Force the pods to restart when mutatingwebhook.yaml is updated. This is to ensure certificate is in sync.
        checksum/cert: {{ include (print $.Template.BasePath "/mutatingwebhook.yaml") . | sha256sum }}
{{- with (default .Values.podAnnotations.defaults .Values.podAnnotations.fargateInjector) }}
{{- toYaml . | nindent 8 }}
{{- end }}
      labels:
        {{- include "fargateInjector.labels" . | nindent 8 }}
    spec:
      automountServiceAccountToken: true
      serviceAccountName: {{ include "fargateInjector.serviceAccountName" . }}
{{- $securityContextEnabled := .Values.securityContext.enabled }}
{{- $securityContext := default .Values.securityContext.default .Values.securityContext.fargateInjector }}
{{- $podSecurityContext := default .Values.securityContext.default.pod $securityContext.pod }}
{{- $containerSecurityContext := default .Values.securityContext.default.container $securityContext.container }}
{{- if $securityContextEnabled }}
      securityContext:
{{ toYaml $podSecurityContext | indent 8 }}
{{- end }}
      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.fargateInjector }}
      {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
      {{- if not (eq "" $secret) }}
      imagePullSecrets:
        - name: {{ $secret | quote }}
      {{- end }}
      containers:
        - name: trendmicro-fargate-injector
{{- if $securityContextEnabled }}
          securityContext:
{{ toYaml $containerSecurityContext | indent 12 }}
{{- end }}
          {{- $project := (default $imageDefaults.project .project) }}
          {{- $repository := (ternary (required ".repository is required!" .repository)
            (printf "%s/%s" $project (required ".repository is required!" .repository))
            (not $project))
          }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
      {{- end }}
          ports:
            - containerPort: 8443
          command:
            - /eks-admission-injector
            - --cert-file-path
            - /etc/webhook/certs/cert.pem
            - --key-file-path
            - /etc/webhook/certs/key.pem
            - --log-level
            - {{ .Values.visionOne.fargateInjector.logLevel }}
            - --endpoint
            - {{ .Values.visionOne.endpoint }}
            - --auth-secret-name
            - {{ template "container.security.fullname" . }}-auth
            - --zap-devel={{ default "false" .Values.logConfig.devel }}
            - --zap-log-level={{ include "logLevel" (list .Values.visionOne.fargateInjector.logLevel .) }}
            - --zap-encoder={{ default "json" .Values.logConfig.encoder }}
            - --zap-stacktrace-level={{ default "error" .Values.logConfig.stacktraceLevel }}
            - --zap-time-encoding={{ default "rfc3339" .Values.logConfig.timeEncoding }}
            - --excluded-namespaces
            {{- $excludeNS := include "namespaceExclusions" . }}
            - {{ $excludeNS | quote }}
            - --scout-image-uri
            {{- with .Values.images.scout }}
            {{- $project := (default $imageDefaults.project .project) }}
            {{- $repository := (ternary (required ".repository is required!" .repository)
              (printf "%s/%s" $project (required ".repository is required!" .repository))
              (not $project))
            }}
            {{- $tag := (default $imageDefaults.tag .tag) }}
            - {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
            {{- end }}
            - --falco-image-uri
            {{- with .Values.images.falco }}
            {{- $project := (default $imageDefaults.project .project) }}
            {{- $repository := (ternary (required ".repository is required!" .repository)
              (printf "%s/%s" $project (required ".repository is required!" .repository))
              (not $project))
            }}
            {{- $tag := (default $imageDefaults.tag .tag) }}
            - {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
            {{- end }}
            - --pdig-image-uri
            {{- with .Values.images.pdig }}
            {{- $project := (default $imageDefaults.project .project) }}
            {{- $repository := (ternary (required ".repository is required!" .repository)
              (printf "%s/%s" $project (required ".repository is required!" .repository))
              (not $project))
            }}
            {{- $tag := (default $imageDefaults.tag .tag) }}
            - {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
            {{- end }}
            {{- if ne (len .Values.scout.scout.falcoInternalEvent) 0 }}
            - --falco-internal-event
            - {{ join "," .Values.scout.scout.falcoInternalEvent }}
            {{- end}}{{/* if */}}
            - --pull-image-auth
            {{- $imageDefaults := .Values.images.defaults }}
            {{- with .Values.images.fargateInjector }}
            {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
            - {{ $secret | quote }}
            {{- end }}
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 8443
            initialDelaySeconds: 20
            timeoutSeconds: 5
            periodSeconds: 20
            failureThreshold: 6
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 8443
            initialDelaySeconds: 20
            timeoutSeconds: 5
            periodSeconds: 20
            failureThreshold: 6
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: webhook-certs
              mountPath: /etc/webhook/certs
              readOnly: true
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.fargateInjector) | indent 12 }}
      volumes:
        - name: webhook-certs
          secret:
            secretName: {{ template "fargateInjector.fullname" . }}-tls-certificate
{{- if or .Values.nodeSelector.defaults .Values.nodeSelector.fargateInjector }}
      nodeSelector:
{{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.fargateInjector) | indent 8 }}
{{- end }}
{{- if or .Values.tolerations.defaults .Values.tolerations.fargateInjector }}
      tolerations:
{{ toYaml (default .Values.tolerations.defaults .Values.tolerations.fargateInjector) | indent 8 }}
{{- end }}
{{- if or .Values.affinity.defaults .Values.affinity.fargateInjector }}
      affinity:
{{ toYaml (default .Values.affinity.defaults .Values.affinity.fargateInjector) | indent 8 }}
{{- end }}
{{- $classname := (default (default "" .Values.priorityClassName.default ) .Values.priorityClassName.fargateInjector) }}
{{- if not (eq "" $classname) }}
      priorityClassName: "{{ $classname }}"
{{- end }}
      restartPolicy: Always
{{- end }}
{{ if .Values.serviceAccount.create }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "fargateInjector.serviceAccountName" . }}
  labels:
    {{- include "fargateInjector.labels" . | nindent 4 }}
  {{- with .Values.serviceAccount.fargateInjector.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}
